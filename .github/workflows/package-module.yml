name: Package and Release Bears Pricing Tables Module

on:
  pull_request:
    types: [closed]
    branches:
      - main
  workflow_dispatch:
    # Allows manual triggering

jobs:
  update-version-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Explicitly grant permission to write to repository
      pull-requests: write  # Permission to update PR
    
    steps:
      - name: Determine workflow context
        id: context
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            if [ "${{ github.event.pull_request.merged }}" == "true" ]; then
              echo "is_pr_merge=true" >> $GITHUB_OUTPUT
              echo "is_pr_update=false" >> $GITHUB_OUTPUT
              echo "is_manual=false" >> $GITHUB_OUTPUT
              echo "Running in PR merge context"
            else
              echo "is_pr_merge=false" >> $GITHUB_OUTPUT
              echo "is_pr_update=false" >> $GITHUB_OUTPUT
              echo "is_manual=false" >> $GITHUB_OUTPUT
              echo "Running in PR update context (PR closed without merge)"
            fi
          else
            echo "is_pr_merge=false" >> $GITHUB_OUTPUT
            echo "is_pr_update=false" >> $GITHUB_OUTPUT
            echo "is_manual=true" >> $GITHUB_OUTPUT
            echo "Running in manual trigger context"
          fi

      - name: Check if repository is shallow
        id: check_shallow
        run: |
          if [ -f "$(git rev-parse --git-dir)/shallow" ]; then
            echo "is_shallow=true" >> $GITHUB_OUTPUT
          else
            echo "is_shallow=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # Use fetch-depth: 0 for changelog generation when PR is merged or manual run
          # Otherwise use fetch-depth: 1 for PR updates to be more efficient
          fetch-depth: ${{ ((steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true') && '0') || '1' }}
          token: ${{ secrets.GITHUB_TOKEN }}  # Needed for pushing changes
          # For PR merges, always use main branch; for PR updates use the PR branch; for manual runs use main
          ref: ${{ (steps.context.outputs.is_pr_merge == 'true' && 'main') || (steps.context.outputs.is_pr_update == 'true' && github.event.pull_request.head.ref) || 'main' }}
          # For PR updates, use the PR repository; otherwise use the current repository
          repository: ${{ (steps.context.outputs.is_pr_update == 'true' && github.event.pull_request.head.repo.full_name) || github.repository }}

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
      # Generate version for all contexts (PR update, PR merge, and manual run)
      - name: Generate version and dates
        id: set_version
        run: |
          # Generate base version from current date
          BASE_VERSION=$(date +'%Y.%m.%d')
          CREATION_DATE=$(date +'%Y %B %d')
          CURRENT_YEAR=$(date +'%Y')
          
          # Get all existing tags
          git fetch --tags
          
          # Check if the base version tag already exists
          if git rev-parse "$BASE_VERSION" >/dev/null 2>&1; then
            echo "Tag $BASE_VERSION already exists, finding next available version..."
            
            # Find all tags that match the pattern {BASE_VERSION}.{n}
            MATCHING_TAGS=$(git tag -l "$BASE_VERSION.*")
            
            if [ -z "$MATCHING_TAGS" ]; then
              # No sub-versions exist, use .1
              VERSION="${BASE_VERSION}.1"
            else
              # Find the highest sub-version
              HIGHEST_SUBVERSION=$(echo "$MATCHING_TAGS" | sed "s/^$BASE_VERSION\.//" | sort -n | tail -1)
              NEXT_SUBVERSION=$((HIGHEST_SUBVERSION + 1))
              VERSION="${BASE_VERSION}.$NEXT_SUBVERSION"
            fi
          else
            VERSION="$BASE_VERSION"
          fi
          
          echo "Generated version: $VERSION"
          echo "Creation date: $CREATION_DATE"
          echo "Current year: $CURRENT_YEAR"
          
          # Set outputs for use later
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "creation_date=$CREATION_DATE" >> $GITHUB_OUTPUT
          echo "current_year=$CURRENT_YEAR" >> $GITHUB_OUTPUT
      
      # Update files for all contexts
      - name: Update XML file in repository
        run: |
          # Find the XML file
          XML_FILE="mod_bears_pricing_tables.xml"
          
          if [ -f "$XML_FILE" ]; then
            echo "Found XML file at: $XML_FILE"
            
            # Make a backup of the original file
            cp "$XML_FILE" "${XML_FILE}.bak"
            
            # Display original content
            echo "Original XML content (specific lines):"
            grep -A 6 "<creationDate>" "$XML_FILE" || true
            
            # Update version, creationDate, and copyright using sed with exact line matching
            sed -i "s|<version>.*</version>|<version>${{ steps.set_version.outputs.version }}</version>|g" "$XML_FILE"
            sed -i "s|<creationDate>.*</creationDate>|<creationDate>${{ steps.set_version.outputs.creation_date }}</creationDate>|g" "$XML_FILE"
            
            # Update copyright with year range if needed
            if [ "${{ steps.set_version.outputs.current_year }}" -gt "2025" ]; then
              sed -i "s|<copyright>Copyright (C)[0-9]\{4\} N6REJ</copyright>|<copyright>Copyright (C)2025 - ${{ steps.set_version.outputs.current_year }} N6REJ</copyright>|g" "$XML_FILE"
              sed -i "s|<copyright>Copyright (C)[0-9]\{4\} - [0-9]\{4\} N6REJ</copyright>|<copyright>Copyright (C)2025 - ${{ steps.set_version.outputs.current_year }} N6REJ</copyright>|g" "$XML_FILE"
            else
              sed -i "s|<copyright>Copyright (C)[0-9]\{4\} N6REJ</copyright>|<copyright>Copyright (C)${{ steps.set_version.outputs.current_year }} N6REJ</copyright>|g" "$XML_FILE"
            fi
            
            echo "Updated XML file in repository"
            echo "Updated XML content (specific lines):"
            grep -A 6 "<creationDate>" "$XML_FILE" || true
          else
            echo "::error::XML file not found in repository"
            exit 1
          fi
      
      - name: Update PHP file version
        run: |
          # Find PHP files and update version if they exist
          find . -name "*.php" | while read -r PHP_FILE; do
            if [ -f "$PHP_FILE" ]; then
              if grep -q "@version" "$PHP_FILE"; then
                echo "Updating version in PHP file: $PHP_FILE"
                # Updated regex to handle versions with .n suffixes and variable spacing
                sed -i -E "s|(@version[ ]+).*|\1${{ steps.set_version.outputs.version }}|g" "$PHP_FILE"
                sed -i -E "s|(Version[ ]*:[ ]*).*|\1${{ steps.set_version.outputs.version }}|g" "$PHP_FILE"
              fi
            fi
          done
      
      - name: Update version in all files
        run: |
          # Find all files and update any "* Version: X.X.X" pattern
          find . -type f | while read -r FILE; do
            if [ -f "$FILE" ]; then
              if grep -q "\* Version:" "$FILE"; then
                echo "Updating version in file: $FILE"
                # Update the version pattern
                sed -i -E "s|(\* Version:[ ]*).*|\1${{ steps.set_version.outputs.version }}|g" "$FILE"
              fi
            fi
          done
      
      - name: Update existing language files
        run: |
          # Find language files and update copyright if they exist
          find . -name "*.ini" -o -name "*.sys.ini" | while read -r LANG_FILE; do
            if [ -f "$LANG_FILE" ]; then
              echo "Updating copyright in language file: $LANG_FILE"
              if [ "${{ steps.set_version.outputs.current_year }}" -gt "2025" ]; then
                sed -i "s|; Copyright (C) [0-9]\{4\} - [0-9]\{4\} N6REJ|; Copyright (C) 2025 - ${{ steps.set_version.outputs.current_year }} N6REJ|g" "$LANG_FILE"
                sed -i "s|; Copyright (C) [0-9]\{4\} N6REJ|; Copyright (C) 2025 - ${{ steps.set_version.outputs.current_year }} N6REJ|g" "$LANG_FILE"
              else
                sed -i "s|; Copyright (C) [0-9]\{4\} - [0-9]\{4\} N6REJ|; Copyright (C) ${{ steps.set_version.outputs.current_year }} N6REJ|g" "$LANG_FILE"
                sed -i "s|; Copyright (C) [0-9]\{4\} N6REJ|; Copyright (C) ${{ steps.set_version.outputs.current_year }} N6REJ|g" "$LANG_FILE"
              fi
            fi
          done
      
      - name: Ensure copyright headers in all files
        run: |
          # Define the copyright header for different file types
          COPYRIGHT_YEAR="${{ steps.set_version.outputs.current_year }}"
          VERSION="${{ steps.set_version.outputs.version }}"
          
          # Define copyright year range if needed
          if [ "$COPYRIGHT_YEAR" -gt "2025" ]; then
            COPYRIGHT_YEAR_TEXT="2025 - $COPYRIGHT_YEAR"
          else
            COPYRIGHT_YEAR_TEXT="$COPYRIGHT_YEAR"
          fi
          
          # Create PHP header template
          echo '<?php
/**
 * @package    Bears Pricing Tables
 * @subpackage mod_bears_pricing_tables
 * @version    '"$VERSION"'
 * @author     N6REJ <programming@hallhome.us>
 * @copyright  Copyright (C) '"$COPYRIGHT_YEAR_TEXT"' N6REJ
 * @license    GNU/GPLv3 http://www.gnu.org/licenses/gpl-3.0.html
 */
' > php_header.tmp
          
          # Create CSS header template
          echo '/*
 * Bears Pricing Tables
 * Version: '"$VERSION"'
 * Created by: N6REJ
 * Email: programming@hallhome.us
 * URL: www.hallhome.us
 * License GPLv3.0 - http://www.gnu.org/licenses/gpl-3.0.html
 */
' > css_header.tmp
          
          # Create JS header template
          echo '/*
 * Bears Pricing Tables
 * Version: '"$VERSION"'
 * Created by: N6REJ
 * Email: programming@hallhome.us
 * URL: www.hallhome.us
 * License GPLv3.0 - http://www.gnu.org/licenses/gpl-3.0.html
 */
' > js_header.tmp
          
          # Create language header template
          echo '; Bears Pricing Tables
; Version: '"$VERSION"'
; Created by: N6REJ
; Email: programming@hallhome.us
; URL: www.hallhome.us
; License GPLv3.0 - http://www.gnu.org/licenses/gpl-3.0.html
; Copyright (C) '"$COPYRIGHT_YEAR_TEXT"' N6REJ
' > lang_header.tmp
          
          # Find all files except .xml and .yml
          find . -type f -not -path "*/\.*" -not -name "*.xml" -not -name "*.yml" | while read -r FILE; do
            if [ -f "$FILE" ]; then
              # Get file extension
              EXT="${FILE##*.}"
              
              echo "Processing file: $FILE (.$EXT)"
              
              # Skip empty files
              if [ ! -s "$FILE" ]; then
                echo "  Skipping empty file"
                continue
              fi
              
              # Process based on file extension
              case "$EXT" in
                php)
                  # Check if file already has a PHP header
                  if grep -q "<?php" "$FILE" && grep -q "@package" "$FILE"; then
                    echo "  Updating existing PHP header"
                    # Create a temporary file
                    TMP_FILE=$(mktemp)
                    # Extract the first PHP block
                    sed -n '/<?php/,/\*\//p' "$FILE" > "$TMP_FILE"
                    # Update version and copyright in the existing header
                    sed -i "s|@version.*|@version    $VERSION|g" "$TMP_FILE"
                    sed -i "s|@copyright.*|@copyright  Copyright (C) $COPYRIGHT_YEAR_TEXT N6REJ|g" "$TMP_FILE"
                    # Get the rest of the file (after the first comment block)
                    sed '1,/\*\//d' "$FILE" > "${TMP_FILE}.rest"
                    # Combine the updated header with the rest of the file
                    cat "$TMP_FILE" "${TMP_FILE}.rest" > "$FILE"
                    rm "$TMP_FILE" "${TMP_FILE}.rest"
                  else
                    echo "  Adding PHP header"
                    # Create a temporary file with the new header
                    TMP_FILE=$(mktemp)
                    cat php_header.tmp > "$TMP_FILE"
                    echo "" >> "$TMP_FILE"
                    # If the file doesn't start with <?php, we need to preserve the content
                    if ! grep -q "<?php" "$FILE"; then
                      cat "$FILE" >> "$TMP_FILE"
                      mv "$TMP_FILE" "$FILE"
                    else
                      # If it has <?php but no proper header, we need to be careful
                      sed '1,1d' "$FILE" > "${TMP_FILE}.content"  # Remove the first line (<?php)
                      cat "${TMP_FILE}.content" >> "$TMP_FILE"
                      mv "$TMP_FILE" "$FILE"
                      rm -f "${TMP_FILE}.content"
                    fi
                  fi
                  ;;
                
                css)
                  # Check if file already has a CSS header
                  if grep -q "/\*" "$FILE" && grep -q "Bears Pricing Tables" "$FILE"; then
                    echo "  Updating existing CSS header"
                    # Create a temporary file
                    TMP_FILE=$(mktemp)
                    # Extract the first comment block
                    sed -n '/\/\*/,/\*\//p' "$FILE" > "$TMP_FILE"
                    # Update version in the existing header
                    sed -i "s|Version:.*|Version: $VERSION|g" "$TMP_FILE"
                    # Get the rest of the file (after the first comment block)
                    sed '1,/\*\//d' "$FILE" > "${TMP_FILE}.rest"
                    # Combine the updated header with the rest of the file
                    cat "$TMP_FILE" "${TMP_FILE}.rest" > "$FILE"
                    rm "$TMP_FILE" "${TMP_FILE}.rest"
                  else
                    echo "  Adding CSS header"
                    # Create a temporary file with the new header
                    TMP_FILE=$(mktemp)
                    cat css_header.tmp > "$TMP_FILE"
                    echo "" >> "$TMP_FILE"
                    cat "$FILE" >> "$TMP_FILE"
                    mv "$TMP_FILE" "$FILE"
                  fi
                  ;;
                
                js)
                  # Check if file already has a JS header
                  if grep -q "/\*" "$FILE" && grep -q "Bears Pricing Tables" "$FILE"; then
                    echo "  Updating existing JS header"
                    # Create a temporary file
                    TMP_FILE=$(mktemp)
                    # Extract the first comment block
                    sed -n '/\/\*/,/\*\//p' "$FILE" > "$TMP_FILE"
                    # Update version in the existing header
                    sed -i "s|Version:.*|Version: $VERSION|g" "$TMP_FILE"
                    # Get the rest of the file (after the first comment block)
                    sed '1,/\*\//d' "$FILE" > "${TMP_FILE}.rest"
                    # Combine the updated header with the rest of the file
                    cat "$TMP_FILE" "${TMP_FILE}.rest" > "$FILE"
                    rm "$TMP_FILE" "${TMP_FILE}.rest"
                  else
                    echo "  Adding JS header"
                    # Create a temporary file with the new header
                    TMP_FILE=$(mktemp)
                    cat js_header.tmp > "$TMP_FILE"
                    echo "" >> "$TMP_FILE"
                    cat "$FILE" >> "$TMP_FILE"
                    mv "$TMP_FILE" "$FILE"
                  fi
                  ;;
                
                ini|sys.ini)
                  # Check if file already has a language header
                  if grep -q "; Bears Pricing Tables" "$FILE"; then
                    echo "  Updating existing language header"
                    # Create a temporary file
                    TMP_FILE=$(mktemp)
                    # Extract the first comment block
                    sed -n '/; Bears Pricing Tables/,/; Copyright/p' "$FILE" > "$TMP_FILE"
                    # Update version and copyright in the existing header
                    sed -i "s|; Version:.*|; Version: $VERSION|g" "$TMP_FILE"
                    sed -i "s|; Copyright (C).*|; Copyright (C) $COPYRIGHT_YEAR_TEXT N6REJ|g" "$TMP_FILE"
                    # Get the rest of the file (after the first comment block)
                    sed '1,/; Copyright/d' "$FILE" > "${TMP_FILE}.rest"
                    # Combine the updated header with the rest of the file
                    cat "$TMP_FILE" "${TMP_FILE}.rest" > "$FILE"
                    rm "$TMP_FILE" "${TMP_FILE}.rest"
                  else
                    echo "  Adding language header"
                    # Create a temporary file with the new header
                    TMP_FILE=$(mktemp)
                    cat lang_header.tmp > "$TMP_FILE"
                    echo "" >> "$TMP_FILE"
                    cat "$FILE" >> "$TMP_FILE"
                    mv "$TMP_FILE" "$FILE"
                  fi
                  ;;
                
                md|markdown)
                  # For markdown files, we'll add a simple header if it doesn't exist
                  if ! grep -q "# Bears Pricing Tables" "$FILE"; then
                    echo "  Adding markdown header"
                    TMP_FILE=$(mktemp)
                    echo "# Bears Pricing Tables" > "$TMP_FILE"
                    echo "Version: $VERSION" >> "$TMP_FILE"
                    echo "Copyright (C) $COPYRIGHT_YEAR_TEXT N6REJ" >> "$TMP_FILE"
                    echo "" >> "$TMP_FILE"
                    cat "$FILE" >> "$TMP_FILE"
                    mv "$TMP_FILE" "$FILE"
                  else
                    echo "  Updating existing markdown header"
                    sed -i "s|Version:.*|Version: $VERSION|g" "$FILE"
                    sed -i "s|Copyright (C).*|Copyright (C) $COPYRIGHT_YEAR_TEXT N6REJ|g" "$FILE"
                  fi
                  ;;
                
                *)
                  # For other file types, we'll skip
                  echo "  Skipping file with unknown extension: .$EXT"
                  ;;
              esac
            fi
          done
      
      # Generate changelog for PR merges or manual runs
      - name: Generate changelog
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        id: changelog
        run: |
          # Find the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 --always $(git rev-list --tags --skip=1 --max-count=1) 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag exists, use the first commit
            echo "No previous tag found, using all commits"
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" --reverse)
          else
            echo "Previous tag: $PREVIOUS_TAG"
            # Get all commits since the previous tag
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" ${PREVIOUS_TAG}..HEAD --reverse)
          fi
          
          # Create changelog file
          echo "# ${{ steps.set_version.outputs.version }} (${{ steps.set_version.outputs.creation_date }})" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## What's Changed" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "$CHANGELOG" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # If previous changelog exists, append it
          if [ -f "CHANGELOG.md.bak" ]; then
            # Skip the first line of the backup (the previous version header)
            tail -n +2 "CHANGELOG.md.bak" >> CHANGELOG.md
          fi
          
          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Display the generated changelog
          echo "Generated changelog:"
          cat CHANGELOG.md
      
      - name: Backup existing changelog
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          if [ -f "CHANGELOG.md" ]; then
            cp CHANGELOG.md CHANGELOG.md.bak
            echo "Backed up existing changelog"
          else
            echo "No existing changelog to backup"
          fi
      
      # For PR updates: Commit changes to PR branch
      - name: Commit changes to PR branch
        if: steps.context.outputs.is_pr_update == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if there are changes to commit
          if git diff --exit-code; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Update version to ${{ steps.set_version.outputs.version }}, creation date to ${{ steps.set_version.outputs.creation_date }}, and copyright year to ${{ steps.set_version.outputs.current_year }}"
            git push origin ${{ github.event.pull_request.head.ref }}
            echo "Changes committed and pushed to PR branch"
          fi
      
      # For PR merges: Commit changes to main branch
      - name: Commit changes to main branch for PR merge
        if: steps.context.outputs.is_pr_merge == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if there are changes to commit
          if git diff --exit-code; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Update version to ${{ steps.set_version.outputs.version }} for release"
            git push origin main
            echo "Changes committed and pushed to main branch"
          fi
      
      # For manual runs: Commit changes to main branch
      - name: Commit changes to main branch for manual run
        if: steps.context.outputs.is_manual == 'true'
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
          # Check if there are changes to commit
          if git diff --exit-code; then
            echo "No changes to commit"
          else
            git add .
            git commit -m "Update version to ${{ steps.set_version.outputs.version }}, creation date to ${{ steps.set_version.outputs.creation_date }}, and copyright year to ${{ steps.set_version.outputs.current_year }}"
            git push origin main
            echo "Changes committed and pushed to main branch"
          fi
      
      # For PR merges or manual runs: Create release
      - name: Create package directory
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: mkdir -p package/mod_bears_pricing_tables
      
      - name: Copy module files
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          # Copy required files
          cp mod_bears_pricing_tables.php package/mod_bears_pricing_tables/
          cp mod_bears_pricing_tables.xml package/mod_bears_pricing_tables/
          cp helper.php package/mod_bears_pricing_tables/
          
          # Copy optional files if they exist
          if [ -f "License.txt" ]; then
            cp License.txt package/mod_bears_pricing_tables/
          fi
          
          if [ -f "index.html" ]; then
            cp index.html package/mod_bears_pricing_tables/
          fi
          
          if [ -f "CHANGELOG.md" ]; then
            cp CHANGELOG.md package/mod_bears_pricing_tables/
          fi
          
          # Copy directories
          if [ -d "css" ]; then
            cp -r css package/mod_bears_pricing_tables/
          fi
          
          if [ -d "elements" ]; then
            cp -r elements package/mod_bears_pricing_tables/
          fi
          
          if [ -d "tmpl" ]; then
            cp -r tmpl package/mod_bears_pricing_tables/
          fi
          
          if [ -d "language" ]; then
            cp -r language package/mod_bears_pricing_tables/
          fi
          
          # List the contents of the package directory
          echo "Package contents:"
          ls -la package/mod_bears_pricing_tables/
      
      - name: Generate directory tree
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          apt-get update && apt-get install -y tree
          tree package/mod_bears_pricing_tables > package/directory-structure.txt
      
      - name: Create ZIP archive
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          cd package
          zip -r mod_bears_pricing_tables_${{ steps.set_version.outputs.version }}.zip mod_bears_pricing_tables
          echo "Created ZIP archive: mod_bears_pricing_tables_${{ steps.set_version.outputs.version }}.zip"
      
      
      - name: Create GitHub Release
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.set_version.outputs.version }}
          name: Bears Pricing Tables ${{ steps.set_version.outputs.version }}
          files: |
            package/mod_bears_pricing_tables_${{ steps.set_version.outputs.version }}.zip
            package/directory-structure.txt
          draft: false
          prerelease: false
          body: |
            Bears Pricing Tables Module ${{ steps.set_version.outputs.version }}
            
            ### Download Options:
            - Download directly from this release page
            - Access the artifact from the Actions tab of this workflow run
            
            ${{ steps.changelog.outputs.changelog }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Update the Joomla update server XML file after release is created
      - name: Update Joomla update server XML
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          # Define the updates.xml file path
          UPDATES_XML="updates.xml"
          
          if [ -f "$UPDATES_XML" ]; then
            echo "Found updates.xml file at: $UPDATES_XML"
            
            # Make a backup of the original file
            cp "$UPDATES_XML" "${UPDATES_XML}.bak"
            
            # Create the download URL for the new release
            DOWNLOAD_URL="https://github.com/${{ github.repository }}/releases/download/${{ steps.set_version.outputs.version }}/mod_bears_pricing_tables_${{ steps.set_version.outputs.version }}.zip"
            
            # Update the version and download URL in the updates.xml file
            sed -i "s|<version>.*</version>|<version>${{ steps.set_version.outputs.version }}</version>|g" "$UPDATES_XML"
            sed -i "s|<downloadurl type=\"full\" format=\"zip\">.*</downloadurl>|<downloadurl type=\"full\" format=\"zip\">$DOWNLOAD_URL</downloadurl>|g" "$UPDATES_XML"
            
            echo "Updated updates.xml file with new version and download URL"
            echo "Updated XML content:"
            cat "$UPDATES_XML"
            
            # Commit and push the updated updates.xml file
            git config --global user.name "GitHub Actions"
            git config --global user.email "actions@github.com"
            
            # Check if there are changes to commit
            if git diff --exit-code; then
              echo "No changes to commit in updates.xml"
            else
              git add "$UPDATES_XML"
              git commit -m "Update updates.xml for version ${{ steps.set_version.outputs.version }}"
              git push origin main
              echo "Changes to updates.xml committed and pushed to main branch"
            fi
          else
            echo "::warning::updates.xml file not found in repository"
          fi
      
      # Upload artifact for easy access from GitHub Actions
      - name: Upload to GitHub Artifacts
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        id: upload_artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: mod_bears_pricing_tables_${{ steps.set_version.outputs.version }}
          path: package/mod_bears_pricing_tables_${{ steps.set_version.outputs.version }}.zip
          retention-days: 90
          if-no-files-found: warn
      
      # Add information about downloading the artifact
      - name: Artifact Download Information
        if: steps.context.outputs.is_pr_merge == 'true' || steps.context.outputs.is_manual == 'true'
        run: |
          echo "::notice::The module package has been uploaded as an artifact."
          echo "::notice::You can download it from the Actions tab of this workflow run."
          echo "::notice::Go to Actions → This workflow → This run → Artifacts section → Download 'mod_bears_pricing_tables_${{ steps.set_version.outputs.version }}'"
